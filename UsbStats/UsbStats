#!/usr/bin/python

import psutil
import serial
import time
import random
import sys
import os

# --- constants & variables

PORT = '/dev/ttyUSB0'
SPEED = 19200

debug = False

history_cpu = []
history_mem = []

suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB']

mem = ['total', 'used', 'free']
disk = ['total', 'used', 'free']
net = ['bytes_sent', 'bytes_recv']

def send(prefix, *args):
    data = prefix + ','.join(args) + '\r'
    if debug:
        sys.stdout.write (data + '\n')
    else:
        arduino.write(data)

def format_size(nbytes):
    if nbytes == 0:
        return '0 B'
    i = 0
    while nbytes >= 1024 and i < len(suffixes)-1:
        nbytes /= 1024.
        i += 1
    f = ('%0.1f' % nbytes).rstrip('0').rstrip('.')
    return '%s%s' % (f, suffixes[i])

def history():
    values = psutil.cpu_times_percent(interval=1, percpu=False)
    if len(history_cpu) > 63:
        del history_cpu[0]
    history_cpu.append(str('%02d' % (100 - int(values.idle))))

    values = psutil.virtual_memory()
    if len(history_mem) > 63:
        del history_mem[0]
    history_mem.append(str(values.used / 1024))

def core_usage():
    for i in xrange(5):
        values = psutil.cpu_times_percent(interval=1, percpu=True)
        nb = 0
        tmp = []
        for core, idle in enumerate(values):
            nb += 1
            tmp.append(str('%02d' % (100 - int(values[core].idle))))
        tmp.insert(0, str('%02d' % nb))
        send('1')
        send(','.join(tmp))
        send('\r')

def cpu_usage():
    for i in xrange(5):
        send('2')
        send(','.join(history_cpu))
        send('\r')
        history()

def mem_usage():
    values = psutil.virtual_memory()
    tmp = []
    for index, item in enumerate(mem):
        tmp.append(item[0].upper() +
                   ' ' +
                   '%8s' % format_size(values._asdict()[item]))
    send('3')
    send(','.join(tmp))
    send('\r')


def net_usage():
    values = psutil.net_io_counters(pernic=False)
    tmp = []
    for index, item in enumerate(net):
        tmp.append(item[6].upper() +
                   ' ' +
                   '%8s' % format_size(values._asdict()[item]))
    send('5')
    send(','.join(tmp))
    send('\r')

def disk_usage ():
    values = psutil.disk_usage('/')
    send('0', "Root FS GB", 
              "Size %5.1f" % (float(values.total) / (1024.*1024*1024)),
              "Used %5.1f" % (float(values.used) / (1024.*1024*1024)),
              "Free %5.1f" % (float(values.free) / (1024.*1024*1024)),
              "Use%% %4.1f%%" % float(values.percent))

def uptime ():
    with open ('/proc/uptime') as f:
        secs = f.read ().split(' ')[0]
    secs = int (float(secs))
    days = secs // 86400
    secs %= 86400
    hours = secs // 3600
    secs %= 3600
    minutes = secs // 60
    secs %= 60
    send('1', "Sys uptime", 
              " %4d day" % days,
              " %4d hrs" % hours,
              " %4d min" % minutes,
              " %4d sec" % secs)

def main ():
    global debug, arduino
    debug = '-D' in sys.argv[1:]
    once = '-o' in sys.argv[1:]
    if not debug:
        arduino = serial.Serial(PORT, SPEED, writeTimeout=1)

    while True:
        disk_usage ()
        time.sleep (0.1)
        uptime ()
        time.sleep (0.9)
        if once:        
            sys.exit (0)

if __name__ == '__main__':
    HOME="/home/pi/johnd"
    daem = "-d" in sys.argv[1:]
    if daem:
        import daemon
        out = open (os.path.join (HOME, "newstats.out"), "w")
        with daemon.DaemonContext (uid = 1000, gid = 1000, stdout = out, stderr = out, working_directory = HOME):
            main ()
    else:
        main ()


